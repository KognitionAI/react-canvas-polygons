"use strict";var _tool=_interopRequireDefault(require("./tool"));Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.LINE=void 0;function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}function _objectSpread(a){for(var b=1;b<arguments.length;b++){var c=null==arguments[b]?{}:arguments[b],d=Object.keys(c);"function"==typeof Object.getOwnPropertySymbols&&(d=d.concat(Object.getOwnPropertySymbols(c).filter(function(a){return Object.getOwnPropertyDescriptor(c,a).enumerable}))),d.forEach(function(b){_defineProperty(a,b,c[b])})}return a}function _defineProperty(a,b,c){return b in a?Object.defineProperty(a,b,{value:c,enumerable:!0,configurable:!0,writable:!0}):a[b]=c,a}var LINE="Line";exports.LINE="Line";var line=_objectSpread({},_tool.default);line.name="Line",line.onMouseDown=function(a,b){this.ctx.strokeStyle=b?b.color:"#000",this.setInitSettings({start:a,options:b}),this.state.data||(this.state.firstMouseDown=a,this.state.data=[])},line.onMouseMove=function(a){this.state&&this.state.started&&(this.ctx.putImageData(this.imageData,0,0),this.draw(this.state.start,a))},line.onMouseUp=function(a,b){if(this.state&&(this.state.data.push([a.x,a.y]),1<this.state.data.length)){var c=[[this.state.firstMouseDown.x,this.state.firstMouseDown.y],[a.x,a.y]],d=this.state.start,e=this.state.options;return this.drawCrossDirection(this.state.data,10),this.resetState(),b(),{data:c,canvas:{start:d,end:a,options:e}}}// NOTE: This state data is just to avoid draw in
// the first mouse up
};function getCrossPath(a,b){var c=new Path2D,d={x:a.x-b,y:a.y},e={x:a.x+b,y:a.y},f={x:a.x,y:a.y-b},g={x:a.x,y:a.y+b};return c.moveTo(d.x,d.y),c.lineTo(e.x,e.y),c.moveTo(f.x,f.y),c.lineTo(g.x,g.y),c}/* Xt = (X1+X2)/2 + M * sign(Y2-Y1)
Yt = (Y1+Y2)/2 - M * sign(X2-X1) */line.drawCrossDirection=function(a){var b=a[0][0],c=a[1][0],d=a[0][1],e=a[1][1],f=Math.atan2(e-d,c-b),g=f+Math.PI/2,h=10,i=Math.PI/6,j=12,k=20,l=new Path2D,m=b+k*Math.cos(g),n=d+k*Math.sin(g);l.moveTo(b,d),l.lineTo(m,n);// Draw enter arrowhead as filled triangle
var o=new Path2D;o.moveTo(m+5*Math.cos(g),n+5*Math.sin(g)),o.lineTo(m-h*Math.cos(g-i)+5*Math.cos(g),n-h*Math.sin(g-i)+5*Math.sin(g)),o.lineTo(m-h*Math.cos(g+i)+5*Math.cos(g),n-h*Math.sin(g+i)+5*Math.sin(g)),o.closePath();// Draw "exit" arrow at end point (pointing up)
var p=new Path2D,q=c-k*Math.cos(g),r=e-k*Math.sin(g);p.moveTo(c,e),p.lineTo(q,r);// Draw exit arrowhead as filled triangle
var s=new Path2D;// Draw arrow lines separately
// Fill enter arrowhead (green)
// Green
// Fill exit arrowhead (red)
// Red
// Add labels
// Keep text black
// Position labels perpendicular to arrows
s.moveTo(q-5*Math.cos(g),r-5*Math.sin(g)),s.lineTo(q+h*Math.cos(g-i)-5*Math.cos(g),r+h*Math.sin(g-i)-5*Math.sin(g)),s.lineTo(q+h*Math.cos(g+i)-5*Math.cos(g),r+h*Math.sin(g+i)-5*Math.sin(g)),s.closePath(),this.ctx.stroke(l),this.ctx.stroke(p),this.ctx.fillStyle="#008000",this.ctx.fill(o),this.ctx.fillStyle="#FF0000",this.ctx.fill(s),this.ctx.font="12px Arial",this.ctx.textAlign="center",this.ctx.fillStyle="#000",this.ctx.fillText("enter",m+(j+5)*Math.cos(g),n+(j+5)*Math.sin(g)),this.ctx.fillText("exit",q-j*Math.cos(g),r-j*Math.sin(g))};var _default=line;exports.default=_default;